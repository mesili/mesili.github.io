{"version":3,"sources":["common/SystemEntry/index.jsx","common/LocationEntry/index.jsx","helpers/actionCreator.js","state/servers.js","pages/Home/HomeFilters/index.jsx","helpers/servers.js","pages/Home/index.jsx","helpers/store.js","App.jsx","serviceWorker.js","index.js"],"names":["SystemEntry","region","idx","system","useSelector","state","servers","locations","id","name","time","mode","mod_id","players","address","criminal_activity","minutes","Math","floor","seconds","rgb","criminalStyle","color","href","target","rel","toString","padStart","style","LocationEntry","systems","modes","className","Object","keys","filter","e","current_mode","undefined","sort","a","b","parseInt","map","i","key","type","payload","dispatch","constants","actions","set","actionCreator","tick","defaultState","regions","FilterEntry","value","action","useDispatch","onChange","checked","htmlFor","LocationFilters","items","ModeFilters","HomeFilters","getServers","fetch","then","r","json","groupByLocation","forEach","loc","location","toLowerCase","concat","Home","useEffect","loadServers","result","retrieval","setInterval","clearInterval","rootReducer","combineReducers","reducers","actual_mode","s","composeEnhancers","compose","middlewares","thunkMiddleware","App","store","initialState","createStore","applyMiddleware","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c3539c3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\n\nexport const SystemEntry = ({\n    region,\n    idx,\n}) => {\n\n    const system = useSelector(state => state.servers.locations[region][idx])\n    const { id,\n        name,\n        time,\n        mode,\n        mod_id,\n        address,\n        players,\n        criminal_activity,\n    } = system\n\n    const minutes = Math.floor(time / 60)\n    const seconds = time - (minutes * 60)\n\n    /* Coloring the criminality level */\n    const rgb = [\n        255, \n        255 - criminal_activity * 42,\n        255 - criminal_activity * 42,\n    ]\n    const criminalStyle = {\n        color: `rgb(${rgb[0]}, ${rgb[1] < 0 ? 0 : rgb[1]}, ${rgb[2] < 0 ? 0 : rgb[2]})`\n    }\n\n    return (\n        <tr>\n            <td>\n                <a href={`https://starblast.io/#${id}`} target=\"_blank\" rel=\"noopener noreferrer\">{id}</a>\n            </td>\n            <td>\n                <a href={`https://starblast.io/#${id}`} target=\"_blank\" rel=\"noopener noreferrer\">{name}</a>\n            </td>\n            <td>{mod_id ? `mod: ${mod_id}` : mode}</td>\n            <td>{players}</td>\n            <td>\n                {minutes.toString().padStart(2, '0')}\n                :\n                {seconds.toString().padStart(2, '0')}\n            </td>\n            <td style={criminalStyle}>{criminal_activity}</td>\n        </tr>\n    )\n}\n\nexport default SystemEntry\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport SystemEntry from 'common/SystemEntry'\nimport './style.scss'\n\n\nexport const LocationEntry = ({name, systems={}}) => {\n\n    const { modes } = useSelector(state => state.servers)\n    const filterMode = e => {\n        const current_mode = systems[e].mod_id || systems[e].mode\n        return undefined === modes[current_mode] || true === modes[current_mode]\n    }\n\n    return (\n        <section className=\"location\">\n            <h3>{name}</h3>\n            <table className=\"box\">\n                <thead>\n                    <tr>\n                        <td>id</td>\n                        <td>Name</td>\n                        <td>Mode</td>\n                        <td>Players</td>\n                        <td>Elasped time</td>\n                        <td>Criminality</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.keys(systems)\n                            .filter(filterMode)\n                            .sort((a,b) => parseInt(systems[b].players) - parseInt(systems[a].players))\n                                .map((e,i) => <SystemEntry key={i} region={name} idx={i} />)}\n                            </tbody>\n                        </table>\n                    </section>\n                            )\n}\n\nexport default LocationEntry\n","export default (type, payload) => dispatch => dispatch({type,payload});\n","import actionCreator from \"helpers/actionCreator\"\n\nexport const constants = {\n    SET:\"servers/set\",\n    FILTER_REGIONS:\"servers/filterRegions\",\n    FILTER_MODES:\"servers/filterModes\",\n    TICK:\"servers/tick\",\n}\n\nexport const actions = {\n    set: payload => actionCreator(constants.SET, payload),\n    region: payload => actionCreator(constants.FILTER_REGIONS, payload),\n    mode: payload => actionCreator(constants.FILTER_MODES, payload),\n    tick: payload => actionCreator(constants.TICK, null),\n}\n\nconst defaultState = {\n    locations:[],\n    regions:{\n        'america':true,\n        'europe':true,\n        'brazil':true,\n        'asia':true,\n    },\n    modes:{\n        'team':true, \n        'survival':true,\n        'deathmatch':true,\n        'invasion':true,\n    },\n}\n\nexport const servers = (state = defaultState, {type, payload}) => {\n\n    const reducers = {\n\n        [constants.SET]: () => {\n            const modes = { ...state.modes }\n            const regions = Object.keys(payload)\n            const locations = {}\n            /* Populating modes with available ones */\n            regions.forEach(e => {\n                const systems = payload[e] || []\n                locations[e] = systems\n                    .sort((a,b) => b.players - a.players)\n                    .map(b => {\n                    const actual_mode = b.mod_id || b.mode\n                    if (modes[actual_mode] === undefined) \n                        modes[actual_mode] = true\n                    return b\n                })\n            })\n\n            return {\n                ...state,\n                locations: payload,\n                modes\n            }\n        },\n        [constants.FILTER_REGIONS]: () => {\n            const regions = { ...state.regions }\n            regions[payload.name] = payload.value\n            return { ...state, regions }\n        },\n\n        [constants.FILTER_MODES]: () => {\n            const modes = { ...state.modes }\n            modes[payload.name] = payload.value\n            return { ...state, modes }\n        },\n\n        [constants.TICK]: () => {\n            const locations = { ...state.locations }\n            const locKeys = Object.keys(locations)\n            const newLocations = locKeys.forEach(e => {\n                locations[e] = locations[e].map(s => ({...s, time: s.time+1})\n                )\n            })\n            return { ...state, locations: locations }\n        },\n\n    }\n\n    if (reducers[type]) {\n        return reducers[type]()\n    }\n\n    return state\n}\n\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions } from 'state/servers'\n\n\nconst FilterEntry = ({name, value, action}) => {\n    const dispatch = useDispatch()\n    const filter = (name, value) => dispatch(actions[action]({name, value}))\n   return (\n        <>\n            <input \n                id={name}\n                type={\"checkbox\"}\n                name={\"filters[]\"}\n                onChange={()=> filter(name, !value)} \n                checked={value}\n            />\n            <label htmlFor={name}>\n                {name} \n            </label>\n        </>\n    )\n}\n\nconst LocationFilters = ({action, items}) => {\n    const { regions } = useSelector(state => state.servers)\n\n    return (\n        <div className=\"box\">\n            <div id=\"locations-filters\">\n                <h3>Locations Filters</h3>\n                {Object.keys(items).sort().map((e,i) => (\n                    <FilterEntry key={i} name={e} value={items[e]} action={action} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nconst ModeFilters = ({action, items}) => {\n\n    return (\n        <div className=\"box\">\n            <div id=\"modes-filters\">\n                <h3>Modes Filters</h3>\n                {Object.keys(items).sort().map((e,i) => (\n                    <FilterEntry key={i} name={e} value={items[e]} action={action} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\n\nconst HomeFilters = () => {\n    const { regions, modes } = useSelector(state => state.servers)\n    \n    return (\n        <div id=\"home-filters\">\n            <LocationFilters action=\"region\" items={regions} />\n            <ModeFilters action=\"mode\" items={modes} />\n        </div>\n    )\n}\n\nexport default HomeFilters\n","export const getServers = async () => {\n    const simstatus = 'https://starblast.io/simstatus.json'\n    return await fetch(simstatus).then(r => r.json())\n}\n\nexport const groupByLocation = servers => {\n    const locations = {} \n    servers.forEach(e => {\n        const loc = e.location.toLowerCase()\n        if (!locations[loc]) locations[loc] = []\n        locations[loc] = locations[loc].concat(e.systems)\n    })\n    return locations\n}\n\n\n","import React, { useEffect } from 'react'\nimport LocationEntry from 'common/LocationEntry'\nimport HomeFilters from './HomeFilters'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions } from 'state/servers'\nimport { getServers, groupByLocation } from 'helpers/servers'\nimport './style.scss'\n\n\nexport const Home =  () => {\n\n    const dispatch = useDispatch()\n\n    /* Server retrieval */\n    useEffect(() => { \n        const loadServers = () => getServers()\n            .then(groupByLocation)\n            .then(result => dispatch(actions.set(result)))\n        loadServers()\n        const retrieval = setInterval(() => loadServers(), 20000)\n        return () => clearInterval(retrieval)\n    }, [ dispatch ])\n\n    /* Location tick */\n    useEffect(() => {\n        const tick = setInterval(() => dispatch(actions.tick()), 1000)\n        return () => clearInterval(tick)\n    }, [ dispatch ])\n\n    const { locations, regions } = useSelector( state => state.servers )\n\n    return (\n        <section id=\"Home\">\n            <HomeFilters />\n            <h2>Locations</h2>\n            {\n                Object.keys(locations)\n                    .sort()\n                    .filter(e => undefined === regions[e] || true === regions[e])\n                    .map((e,i) => (<LocationEntry key={i} name={e} systems={{...locations[e]}} />))\n            }\n        </section>\n    )\n}\n\nexport default Home\n","import { compose, createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { combineReducers } from \"redux\";\n\nimport  { servers }  from \"state/servers\";\n\nconst rootReducer = combineReducers({\n    servers,\n});\n\nexport default rootReducer;\n\nconst isDev = process.env.NODE_ENV === \"development\"; \n\nconst composeEnhancers = (isDev && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) \n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace:true, traceLimit:25 }) \n    : compose;\n\nconst middlewares = [\n    thunkMiddleware,\n];\n\nif (isDev) {\n    const { logger } = require(\"redux-logger\");\n    middlewares.push(logger);\n}\n\nexport const store = initialState => createStore(\n    rootReducer,\n    initialState, \n    composeEnhancers( applyMiddleware( ...middlewares ) ) \n);\n","import React from 'react'\nimport { Provider } from 'react-redux';\nimport Home from 'pages/Home'\nimport { store } from 'helpers/store';\nimport 'normalize.css'\nimport 'theme/app.scss'\n\nexport const App = () => (\n    <Provider store={store({})}>\n        <Home />\n    </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}