{"version":3,"sources":["common/SystemEntry/index.jsx","common/LocationEntry/index.jsx","helpers/servers.js","state/serversSlice.js","common/Filter/index.jsx","pages/Home/HomeFilters/index.jsx","pages/Home/index.jsx","helpers/store.js","App.jsx","serviceWorker.js","index.js"],"names":["SystemEntry","region","id","name","time","mode","mod_id","players","criminal_activity","minutes","Math","floor","seconds","rgb","criminalStyle","color","href","target","rel","toString","padStart","style","LocationEntry","systems","modes","useSelector","state","servers","filteredSystems","Object","keys","filter","e","current_mode","sort","a","b","parseInt","className","map","i","key","getServers","fetch","then","r","json","groupByLocation","locations","forEach","loc","location","toLowerCase","concat","createSlice","initialState","loading","error","regions","mods","reducers","getServersStart","getServersSuccess","action","payload","locKeys","newLocations","actual_mode","undefined","getServersFailure","tick","s","filterField","field","value","actions","fetchServers","dispatch","message","console","Filter","label","useDispatch","serverFilter","type","onChange","checked","htmlFor","LocationFilters","items","ModeFilters","HomeFilters","length","Home","useEffect","retrieval","setInterval","clearInterval","store","configureStore","reducer","serversSlice","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ebd26b68.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport const SystemEntry = ({\n    region,\n    id,\n    name,\n    time,\n    mode,\n    mod_id,\n    players,\n    criminal_activity,\n}) => {\n\n    const minutes = Math.floor(time / 60)\n    const seconds = time - (minutes * 60)\n\n    /* Coloring the criminality level */\n    const rgb = [\n        255, \n        255 - criminal_activity * 42,\n        255 - criminal_activity * 42,\n    ]\n    const criminalStyle = {\n        color: `rgb(${rgb[0]}, ${rgb[1] < 0 ? 0 : rgb[1]}, ${rgb[2] < 0 ? 0 : rgb[2]})`\n    }\n\n    return (\n        <tr>\n            <td>\n                <a href={`https://starblast.io/#${id}`} target=\"_blank\" rel=\"noopener noreferrer\">{id}</a>\n            </td>\n            <td>\n                <a href={`https://starblast.io/#${id}`} target=\"_blank\" rel=\"noopener noreferrer\">{name}</a>\n            </td>\n            <td>{mod_id ? `mod: ${mod_id}` : mode}</td>\n            <td>{players}</td>\n            <td>\n                {minutes.toString().padStart(2, '0')}\n                :\n                {seconds.toString().padStart(2, '0')}\n            </td>\n            <td style={criminalStyle}>{criminal_activity}</td>\n        </tr>\n    )\n}\n\nexport default SystemEntry\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport SystemEntry from 'common/SystemEntry'\nimport './style.scss'\n\n\nexport const LocationEntry = ({name, systems={}}) => {\n\n    const { modes } = useSelector(state => state.servers)\n\n    const filterMode = e => {\n        const current_mode = systems[e].mod_id || systems[e].mode\n        return true === modes[current_mode]\n    }\n\n    const filteredSystems = Object.keys(systems)\n        .filter(filterMode)\n        .sort((a,b) => parseInt(systems[b].players) - parseInt(systems[a].players))\n\n    return (\n        <section className=\"location\">\n            <h3>{name}</h3>\n            <table className=\"box\">\n                <thead>\n                    <tr>\n                        <td>id</td>\n                        <td>Name</td>\n                        <td>Mode</td>\n                        <td>Players</td>\n                        <td>Elasped time</td>\n                        <td>Criminality</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {filteredSystems.map((e,i) => (\n                        <SystemEntry key={i} region={name} {...systems[e]} />\n                    ))}\n                </tbody>\n            </table>\n        </section>\n        )\n}\n\nexport default LocationEntry\n","export const getServers = async () => {\n    const simstatus = 'https://starblast.io/simstatus.json'\n    const servers = await fetch(simstatus).then(r => r.json())\n    return groupByLocation(servers)\n}\n\nexport const groupByLocation = servers => {\n    const locations = {} \n    servers.forEach(e => {\n        const loc = e.location.toLowerCase()\n        if (!locations[loc]) locations[loc] = []\n        locations[loc] = locations[loc].concat(e.systems)\n    })\n    return locations\n}\n\n\n","import { createSlice } from '@reduxjs/toolkit'\nimport { getServers } from 'helpers/servers'\n\nconst initialState = {\n    loading:false,\n    error:null,\n    locations:{},\n    regions:{},\n    modes:{},\n    mods: {},\n}\n\nconst servers = createSlice({\n    name: 'servers',\n    initialState,\n    reducers: {\n        getServersStart(state) {\n            state.loading = true\n            state.error = null\n        },\n        getServersSuccess(state, action) {\n            const { locations } = action.payload\n            const locKeys = Object.keys(locations)\n            const newLocations = {}\n            locKeys.forEach(e => {\n                state.regions[e] = state.regions[e] === false ? false : true;\n                newLocations[e] = (locations[e] || [])\n                    .sort((a,b) => b.players - a.players)\n                    .map(b => {\n                        const actual_mode = b.mod_id || b.mode\n                        if (b.mod_id && !state.mods[b.mod_id]) {\n                            state.mods[b.mod_id] = true;\n                        }\n                        if (state.modes[actual_mode] === undefined) {\n                            state.modes[actual_mode] = true\n                        }\n                        return b\n                    })\n            })\n            state.locations = newLocations\n            state.loading = false\n            state.error = null\n        },\n        getServersFailure(state, action) {\n            state.loading = false\n            state.error = action.payload\n        },\n        tick(state) {\n            const locKeys = Object.keys(state.locations)\n            locKeys.forEach(e => {\n                state.locations[e] = state.locations[e].map(s => ({...s, time: s.time+1}))\n            })\n        },\n        filterField(state, action) {\n            const { field, name, value } = action.payload\n            state[field][name] = value\n        }\n    }\n})\n\nconst {\n    getServersStart,\n    getServersSuccess,\n    getServersFailure,\n    filterField,\n    tick,\n} = servers.actions\n\nexport default servers.reducer\n\nexport const fetchServers = () => async dispatch => {\n    try {\n        dispatch(getServersStart())\n        const locations = await getServers()\n        dispatch(getServersSuccess({ locations }))\n    } catch (err) {\n        dispatch(getServersFailure(err.message))\n        console.error(err)\n    }\n}\n\nexport const tickLocations = () => dispatch => dispatch(tick())\n\nexport const serverFilter = (field, key, value) => dispatch => dispatch(filterField(field, key, value))\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { serverFilter } from 'state/serversSlice'\n\nexport const Filter = ({field, name, label, value, action}) => {\n\n    const dispatch = useDispatch()\n    const filter = (field, name, value) => dispatch(serverFilter({field, name, value}))\n\n    return (\n        <div>\n            <input \n                id={name}\n                type={\"checkbox\"}\n                name={\"filters[]\"}\n                onChange={()=> filter(field, name, !value)} \n                checked={value}\n            />\n            <label htmlFor={name}>{label || name}</label>\n        </div>\n    )\n}\n\n\nexport default Filter;\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Filter from 'common/Filter'\n\nconst LocationFilters = ({action, items}) => (\n    <div className=\"box\">\n        <div id=\"locations-filters\">\n            <h3>Locations Filters</h3>\n            {Object.keys(items).sort().map((e,i) => (\n                <Filter\n                    key={i}\n                    name={e}\n                    value={items[e]}\n                    action={action}\n                    field={'regions'}\n                />\n            ))}\n        </div>\n    </div>\n)\n\nconst ModeFilters = ({action, items, mods}) => (\n    <div className=\"box\">\n        <div id=\"modes-filters\">\n            <h3>Modes Filters</h3>\n            {Object.keys(items).sort().map((e,i) => (\n                <Filter\n                    key={i}\n                    name={e}\n                    label={`${mods[e] ? \"mod: \" : \"\"} ${e}`}\n                    value={items[e]}\n                    action={action}\n                    field={'modes'}\n                />\n            ))}\n        </div>\n    </div>\n)\n\nconst HomeFilters = () => {\n    const { regions, modes, mods } = useSelector(state => state.servers)\n\n    return (\n        <div id=\"home-filters\">\n            {Object.keys(regions).length && (<LocationFilters action=\"region\" items={regions} />)}\n            {Object.keys(modes).length && (<ModeFilters action=\"mode\" items={modes} mods={mods} />)}\n        </div>\n    )\n}\n\nexport default HomeFilters\n","import React, { useEffect } from 'react'\nimport LocationEntry from 'common/LocationEntry'\nimport HomeFilters from './HomeFilters'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchServers, tickLocations } from 'state/serversSlice'\nimport './style.scss'\n\n\nexport const Home =  () => {\n\n    const dispatch = useDispatch()\n    /* Server retrieval */\n    useEffect(() => { \n        dispatch(fetchServers())\n        const retrieval = setInterval(() => dispatch(fetchServers()), 20000)\n        return () => clearInterval(retrieval)\n    }, [ dispatch ])\n\n    /* Location tick */\n    useEffect(() => {\n        const tick = setInterval(() => dispatch(tickLocations()), 1000)\n        return () => clearInterval(tick)\n    }, [ dispatch ])\n\n    const { locations, regions } = useSelector( state => state.servers )\n\n    const filterRegion = e => undefined === regions[e] || true === regions[e]\n\n    const mapLocations = (e,i) => (\n        <LocationEntry \n            key={i} \n            name={e} \n            systems={{...locations[e]}} \n        />\n    )\n\n    return (\n        <section id=\"Home\">\n            <HomeFilters />\n            <h2>Locations</h2>\n            {\n                Object.keys(locations)\n                    .sort()\n                    .filter(filterRegion)\n                    .map(mapLocations)\n            }\n        </section>\n    )\n}\n\nexport default Home\n","import { configureStore } from '@reduxjs/toolkit'\nimport serversSlice from 'state/serversSlice'\n\nconst store = configureStore({\n    reducer: {\n        servers: serversSlice\n    }\n})\n\nexport default store\n","import React from 'react'\nimport { Provider } from 'react-redux';\nimport Home from 'pages/Home'\nimport store from 'helpers/store';\nimport 'normalize.css'\nimport 'theme/app.scss'\n\nexport const App = () => (\n    <Provider store={store}>\n        <Home />\n    </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}